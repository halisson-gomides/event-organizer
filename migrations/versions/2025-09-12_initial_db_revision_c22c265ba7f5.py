"""initial db revision

Revision ID: c22c265ba7f5
Revises: 
Create Date: 2025-09-12 15:40:36.542382-03:00

"""

import warnings
from typing import TYPE_CHECKING

import sqlalchemy as sa
from alembic import op
from advanced_alchemy.types import EncryptedString, EncryptedText, GUID, ORA_JSONB, DateTimeUTC, StoredObject, PasswordHash
from sqlalchemy import Text  # noqa: F401

if TYPE_CHECKING:
    from collections.abc import Sequence

__all__ = ["downgrade", "upgrade", "schema_upgrades", "schema_downgrades", "data_upgrades", "data_downgrades"]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText
sa.StoredObject = StoredObject

# revision identifiers, used by Alembic.
revision = 'c22c265ba7f5'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()

def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()

def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('events',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.String(length=1000), nullable=True),
    sa.Column('is_recurring', sa.Boolean(), nullable=False),
    sa.Column('single_start', sa.DateTime(timezone=True), nullable=True),
    sa.Column('single_end', sa.DateTime(timezone=True), nullable=True),
    sa.Column('recurrence_start_date', sa.Date(), nullable=True),
    sa.Column('recurrence_end_date', sa.Date(), nullable=True),
    sa.Column('recurrence_rule', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_events'))
    )
    op.create_table('participants',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('full_name', sa.String(length=200), nullable=False),
    sa.Column('phone', sa.String(length=15), nullable=True),
    sa.Column('birth_date', sa.Date(), nullable=False),
    sa.Column('observations', sa.String(length=200), nullable=True),
    sa.Column('guardian_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['guardian_id'], ['participants.id'], name=op.f('fk_participants_guardian_id_participants')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_participants'))
    )
    op.create_table('user_sessions',
    sa.Column('session_id', sa.String(length=255), nullable=False),
    sa.Column('data', sa.LargeBinary(), nullable=False),
    sa.Column('expires_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.Column('id', sa.GUID(length=16), nullable=False),
    sa.Column('sa_orm_sentinel', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_sessions')),
    sa.UniqueConstraint('session_id', name='uq_user_sessions_session_id')
    )
    with op.batch_alter_table('user_sessions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_sessions_expires_at'), ['expires_at'], unique=False)
        batch_op.create_index('ix_user_sessions_session_id_unique', ['session_id'], unique=True)

    op.create_table('event_occurrences',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('event_id', sa.Integer(), nullable=False),
    sa.Column('start_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('fk_event_occurrences_event_id_events'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_event_occurrences')),
    sa.UniqueConstraint('event_id', 'start_at', 'end_at', name='uq_occurrence_unique_window')
    )
    with op.batch_alter_table('event_occurrences', schema=None) as batch_op:
        batch_op.create_index('ix_occurrence_start', ['start_at'], unique=False)

    op.create_table('attendance',
    sa.Column('occurrence_id', sa.Integer(), nullable=False),
    sa.Column('participant_id', sa.Integer(), nullable=False),
    sa.Column('checkin_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('checkout_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('code_hash', sa.String(length=200), nullable=True),
    sa.Column('checkout_by_participant_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['checkout_by_participant_id'], ['participants.id'], name=op.f('fk_attendance_checkout_by_participant_id_participants')),
    sa.ForeignKeyConstraint(['occurrence_id'], ['event_occurrences.id'], name=op.f('fk_attendance_occurrence_id_event_occurrences'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['participant_id'], ['participants.id'], name=op.f('fk_attendance_participant_id_participants'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('occurrence_id', 'participant_id', name=op.f('pk_attendance')),
    sa.UniqueConstraint('occurrence_id', 'participant_id', name='uq_attendance_once')
    )
    with op.batch_alter_table('attendance', schema=None) as batch_op:
        batch_op.create_index('ix_attendance_checkin', ['checkin_at'], unique=False)

    # ### end Alembic commands ###

def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('attendance', schema=None) as batch_op:
        batch_op.drop_index('ix_attendance_checkin')

    op.drop_table('attendance')
    with op.batch_alter_table('event_occurrences', schema=None) as batch_op:
        batch_op.drop_index('ix_occurrence_start')

    op.drop_table('event_occurrences')
    with op.batch_alter_table('user_sessions', schema=None) as batch_op:
        batch_op.drop_index('ix_user_sessions_session_id_unique')
        batch_op.drop_index(batch_op.f('ix_user_sessions_expires_at'))

    op.drop_table('user_sessions')
    op.drop_table('participants')
    op.drop_table('events')
    # ### end Alembic commands ###

def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""

def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
